from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InlineQueryResultArticle, InputTextMessageContent
import logging
import aiofiles
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from analysis import analyze_sleep_data
from db import get_achievements
from utils import load_tips, load_exercises, choose_random_non_repeating
from keyboards import get_main_keyboard, get_wake_time_keyboard, get_reports_keyboard
import reports
import log_sleep
from config import SLEEP_SCHEDULE
import textwrap

logger = logging.getLogger(__name__)
sleep_tips = []
sleep_exercises = []

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
last_exercise = {}
last_tip = {}


async def load_data(_):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."""
    global sleep_tips, sleep_exercises
    sleep_tips = await load_tips()
    sleep_exercises = await load_exercises()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) started the bot.")
    await update.message.reply_text(
        '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.',
        reply_markup=get_main_keyboard()
    )


async def show_wake_time_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è."""
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è:',
        reply_markup=get_wake_time_keyboard(SLEEP_SCHEDULE)
    )


async def show_times(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞."""
    query = update.callback_query
    await query.answer()

    wake_time = query.data
    sleep_times = SLEEP_SCHEDULE.get(wake_time, [])

    response_text = f'–ß—Ç–æ–±—ã –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤ {wake_time}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–µ—á—å —Å–ø–∞—Ç—å –≤ {" –∏–ª–∏ ".join(sleep_times)}. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ü–∏–∫–ª —Å–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —É–¥–∞—á–Ω–æ, –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –ª–µ–≥–∫–∏–º.'
    await query.edit_message_text(text=response_text)


async def send_tips(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Å–Ω—É."""
    user_id = update.message.from_user.id
    logger.info(f"User {user_id} requested a sleep tip.")

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
    personalized_tip = await analyze_sleep_data(user_id)

    if personalized_tip:
        tip = personalized_tip
        final_text = f" - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:\n\n{tip}"
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π
        logger.info(
            f"Not enough data for personalized tip for user {user_id}. Sending random tip.")
        tip = choose_random_non_repeating(last_tip, user_id, sleep_tips)
        if tip is None:
            logger.warning("No random sleep tips available.")
            await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ —Å–µ–π—á–∞—Å. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ sleep_tips.txt.')
            return
        final_text = f" - –°–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞\n\n{tip}"

    await update.message.reply_text(final_text)


async def send_exercises(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è."""
    user_id = update.message.from_user.id
    logger.info(f"User {user_id} requested a sleep exercise.")
    exercise = choose_random_non_repeating(
        last_exercise, user_id, sleep_exercises)
    if exercise is None:
        logger.warning("No sleep exercises available.")
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å–µ–π—á–∞—Å. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ sleep_exercises.txt.')
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    final_text = f" - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞\n\n{exercise}"

    await update.message.reply_text(final_text)


async def send_help_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = update.message.from_user.id
    logger.info(f"User {user_id} requested help.")
    try:
        async with aiofiles.open('help.txt', 'r', encoding='utf-8') as f:
            help_text = await f.read()
        await update.message.reply_text(help_text)
    except FileNotFoundError:
        logger.error("Help file not found.")
        await update.message.reply_text('–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


async def show_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:',
        reply_markup=get_reports_keyboard()
    )


async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞."""
    user_id = update.message.from_user.id
    user_achievements = await get_achievements(user_id)

    if not user_achievements:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.')
        return

    keyboard = []
    for achievement in user_achievements:
        share_button = InlineKeyboardButton(
            f"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è: {achievement}",
            switch_inline_query=f"–Ø –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement}' –≤ –±–æ—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞!"
        )
        keyboard.append([share_button])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', reply_markup=reply_markup)


def get_log_sleep_conv_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞."""
    return ConversationHandler(
        entry_points=[
            CommandHandler('log_sleep', log_sleep.log_sleep),
            MessageHandler(filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω$'),
                           log_sleep.log_sleep)
        ],
        states={
            log_sleep.LOGGING_SLEEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_sleep.log_wake)],
            log_sleep.LOGGING_WAKE: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_sleep.save_sleep_data)],
        },
        fallbacks=[CommandHandler('log_sleep', log_sleep.log_sleep)],
    )


async def share_achievement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    query = update.inline_query.query
    if not query:
        return

    results = [
        InlineQueryResultArticle(
            id=query.upper(),
            title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º",
            input_message_content=InputTextMessageContent(f"üéâ {query}")
        )
    ]
    await update.inline_query.answer(results)
